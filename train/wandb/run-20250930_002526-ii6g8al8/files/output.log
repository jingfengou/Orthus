[34m[1mwandb[0m: [33mWARNING[0m Serializing object of type dict that is 1922480 bytes
  0%|                                                                                                                                | 0/118 [00:00<?, ?it/s]2025-09-30 00:25:29,133 - WARNING - `use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`.

======================================== [DEBUGGING AT GLOBAL STEP: 0] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'A': 'Option A is incorrect because it is a vertically mirrored version of the back-bottom-left view.', 'C': 'Option C is incorrect because it is a horizontally mirrored version of the front-top-right view.', 'ABCD': 'Assuming the bottom face is the first cell in the second row of the net, then after folding, the front face is cyan, the back face is red, the left face is green, the right face is blue, the top face is yellow, the bottom face is pink.', 'B': 'Option B is correct because it shows the back-bottom-right view.'} The final answer is <answer>B</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93mC',CCCC incorrect A is not  foldedrored image of A A ofright ofview corner of, 'B': 'AC is incorrect because it is a vertically mirrored version of the back-top-left view.', 'C'': 'Theuming the A- is A same,, the row row, the cube, the A the the the second- of the and the second face is red, and top side is green, and right face is yellow, and top face is yellow, and second face is red,, 'A': 'A B is incorrect because it is the net-top-left view of', correct answer B BBA>B/answer>abB[0m
===========================================================================================================
  3%|████                                                                                                                    | 4/118 [00:51<23:09, 12.19s/it]


======================================== [DEBUGGING AT GLOBAL STEP: 1] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'ABCD': 'The counterclockwise rotation of the green object drives the orange object to rotate clockwise, which in turn pulls the weight upward.'} The final answer is <answer>C</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93mB'',B'B ABCclockwise rotation of the green object' the weight object to translate clockwise. causing in turn drives the weight upward.} weight answer is BBA>B/answer>aB:C[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 2] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'D': 'Option D is incorrect because it is the cross-section of the shape made by a plane parallel to the YZ plane.', 'B': 'Option B is incorrect because it is the cross-section of the shape made by a plane parallel to the XY plane.', 'A': 'Option A is incorrect because it is the cross-section of the shape made by a plane parallel to the YZ plane.', 'C': 'Option C is correct because the corresponding cross-section does not match the shape shown in the reference image.'} The final answer is <answer>C</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93mD', [D D' not. it is not same-section of a shape. by A cone. to the x- axis. 'A': 'A B is incorrect because it is the cross-section of the shape made by a plane parallel to the XY plane.', 'C': 'The A is incorrect because it is the cross-section of the shape made by a plane parallel to the ZZ plane., 'D': 'TheC is incorrect because it shape cross-section of not include any shape. in the image image.', correct answer isCCA>C/answer>a0C[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 3] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'D': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option D is correct because it shows the back-bottom-right view.', 'B': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option B is incorrect because it includes rotated non-symmetric faces.', 'C': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option C is incorrect because it includes rotated non-symmetric faces.', 'A': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option A is incorrect because it is a horizontally mirrored version of the back-top-left view.'} The final answer is <answer>D</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93mB' B[Bume B net of is B same, of the row row from the cube, B the secondmost is the second in the right in The B the. it is the correct ofto oftop corner of. 'B': 'Theuming the top face is the first cell in the second row of the net, and the right face is the cell to its right. OptionB is correct because it shows the faces-axmetric patterns.', B'C': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. OptionC is incorrect because it includes rotated non-symmetric faces.', 'A': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. OptionA is incorrect because it includes missing rotated foldedrored version of B B-top-left view., right answer is BBA>C/answer>a1A[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 4] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'C': 'Option C is correct because the initial arrow can be transformed into the final arrow.', 'BDA': 'Option BDA is incorrect because the initial arrow cannot be transformed into the final arrow.'} The final answer is <answer>C</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93mA', 'C B' the' it arrow arrow is move pointing into the final arrow. 'C'': 'A A is is correct because the initial arrow can be transformed into the final arrow.', diagram arrow is correct'answer>./answer>.a0C[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 5] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'B': 'Option B is incorrect because holes in column 1 are missing.', 'A': 'Option A is incorrect because extra holes appear in column 2.', 'D': 'Option D is incorrect because holes that should appear in column 1 appear in column 2.'} The final answer is <answer>C</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m'', The'A B' the' it should paper A1 are not. 'A': 'A A is incorrect because it holes are in column 1.', 'A': 'The A is incorrect because extra in should be in column 3 are in column 2.', grid answer is a<<> answer/ answer>..os<.<>e[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 6] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'ABCD': 'Given three views, at least 4 cubes and at most 4 cubes are required to satisfy the constraints.'} The final answer is <answer>D</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m'D ABC  'ABC three views, what least 3 cubes are a most 3 cubes are required to satisfy the constraints shown'. constraints answer is enclosed'<> answer><<>..osos><> token[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 7] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'C': 'Option C is correct because it was obtained by rotating the original image 180 degrees.', 'A': 'Option A is incorrect because it was obtained by rotating the original image 180 degrees and then flipping it horizontally.', 'B': 'Option B is incorrect because it was obtained by rotating the original image 90 degrees and then flipping it vertically.'} The final answer is <answer>C</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m''':'' A' ' A is a by flipping the left grid.980 degrees clock'..''', 'A A is correct. it was obtained by flipping the original image 180 degrees. flipping flipping it..'. 'A': 'A A is correct because it was obtained by flipping the original image 10 degrees. flipping flipping it horizontally.'.  right answer is a'<>> answer<<C..os<><>.[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 8] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'B': 'Option B is incorrect because one cube is missing, resulting in an incorrect cube stack shape.', 'C': 'Option C is incorrect because one cube is missing, resulting in an incorrect cube stack shape.'} The final answer is <answer>A</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m''':'' B' the'. of is not. but in a option stack stack..''''''' '' B is correct because one is is missing. resulting in an incorrect  stack shape.''' top answer answer a'<>> answer<<>A.os<><>
[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 9] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'CDB': 'Option CDB is incorrect because this net could be a valid net for the given cube, as the positions of cyan, pink, and blue match the shown cube.', 'A': 'Option A is correct because this net cannot be a valid net for the given cube, as the positions of yellow and cyan are reversed.'} The final answer is <answer>A</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m'D''::''B' is'.. is not net net option. the  angle. but well net of the and yellow, yellow yellow are. the in.''''''':'' B'.... is be formed net net. the the cube.. the net of the and blue are not.'''  answer answer the'<>> answer<<>>eos<>_ide[0m
===========================================================================================================

{'loss': 9.0289, 'grad_norm': 17.968496322631836, 'learning_rate': 4.965903258506806e-06, 'epoch': 0.08}
(tensor([[[-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         ...,
         [-4.1406e-01,  9.3750e-02, -4.1562e+00,  ..., -3.5781e+00,
          -1.3984e+00, -3.8125e+00],
         [-1.7188e+00,  1.0620e-02, -5.0312e+00,  ..., -4.1562e+00,
          -1.5547e+00, -4.8438e+00],
         [-1.3516e+00, -9.9609e-01, -4.2812e+00,  ..., -5.5000e+00,
          -8.9453e-01, -4.9375e+00]],

        [[-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         ...,
         [-4.8438e-01,  3.3398e-01, -4.0312e+00,  ..., -3.6250e+00,
          -1.1484e+00, -3.7500e+00],
         [-1.6953e+00,  1.8945e-01, -4.8125e+00,  ..., -4.1250e+00,
          -1.2656e+00, -4.5938e+00],
         [-7.8906e-01, -7.8906e-01, -4.0938e+00,  ..., -5.6250e+00,
          -4.2578e-01, -4.6875e+00]]], device='cuda:0'),)
 13%|████████████████▏                                                                                                        | 2/15 [00:02<00:15,  1.18s/it]
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.8125,   0.0630,  -4.2188,  ...,  -3.5625,  -1.2109,  -3.7344],
         [ -2.1406,  -0.2432,  -5.3750,  ...,  -4.3438,  -1.6953,  -4.8750],
         [ -1.8594,  -1.1797,  -4.9688,  ...,  -5.5938,  -0.8828,  -5.0312]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [  0.2695,   0.7539,  -3.7969,  ...,  -3.4531,  -0.6367,  -3.5469],
         [ -0.6758,   1.1562,  -4.2812,  ...,  -3.5938,  -0.8242,  -3.9375],
         [ -2.3594,  -1.0938,  -5.2188,  ...,  -5.9375,  -0.9883,  -5.2188]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.2412,   0.8477,  -3.5781,  ...,  -3.1562,  -0.1011,  -3.1719],
         [ -1.6406,   0.5742,  -4.7500,  ...,  -3.8594,  -0.6836,  -4.2188],
         [ -3.5000,  -1.3047,  -5.6875,  ...,  -6.4062,  -1.1562,  -5.1875]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.8750,   0.3711,  -4.0312,  ...,  -3.4688,  -0.5820,  -3.8594],
         [ -0.8203,   0.7539,  -4.3438,  ...,  -3.6719,  -0.5586,  -4.5625],
         [ -0.5742,  -0.7695,  -3.5469,  ...,  -5.2500,   0.0308,  -4.8438]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.4141,  -0.2930,  -4.1562,  ...,  -4.2812,  -1.2969,  -4.2188],
         [ -1.6250,   0.1338,  -4.8125,  ...,  -4.2188,  -2.0312,  -4.9688],
         [ -1.2891,  -2.0000,  -5.0000,  ...,  -6.4375,  -1.5000,  -6.1562]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.0981,   0.7266,  -3.6250,  ...,  -3.1719,  -0.1797,  -3.2344],
         [ -1.6328,   0.4922,  -4.8438,  ...,  -3.8906,  -0.8789,  -4.2188],
         [ -3.8594,  -1.5625,  -5.9062,  ...,  -6.6562,  -1.4531,  -5.3125]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.9219,   0.6250,  -3.9531,  ...,  -3.3750,  -0.7422,  -3.5000],
         [ -1.7500,   0.7852,  -4.6875,  ...,  -3.7500,  -0.8164,  -4.1875],
         [ -2.3750,  -0.8789,  -4.6562,  ...,  -5.8125,  -0.5820,  -4.7812]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.7578,  -0.3496,  -4.2188,  ...,  -3.8750,  -1.4297,  -4.1875],
         [ -1.5547,   0.4375,  -4.7500,  ...,  -3.9844,  -1.5312,  -4.7188],
         [ -1.9141,  -1.2266,  -4.5312,  ...,  -5.8438,  -1.0781,  -5.0938]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.2520,   0.4355,  -3.8281,  ...,  -3.3438,  -0.7969,  -3.4531],
         [ -1.6562,   0.2090,  -4.8438,  ...,  -3.9688,  -1.0156,  -4.3438],
         [ -0.8008,  -0.8438,  -4.1250,  ...,  -5.6562,  -0.1191,  -4.4688]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.9453,   0.2812,  -4.0625,  ...,  -3.7500,  -0.9922,  -3.8125],
         [ -0.9492,   0.6133,  -4.7188,  ...,  -4.0312,  -1.1406,  -4.8125],
         [ -0.7461,  -0.8047,  -3.4375,  ...,  -5.4688,  -0.3984,  -5.1562]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.4551,   0.7617,  -3.6875,  ...,  -2.9531,  -0.5469,  -3.3438],
         [ -1.2734,   0.9336,  -4.4062,  ...,  -3.4219,  -0.6914,  -3.9844],
         [ -2.5469,  -1.3438,  -4.6562,  ...,  -6.1250,  -0.8320,  -4.9062]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.3789,   0.3926,  -4.1562,  ...,  -3.6875,  -1.0547,  -3.6562],
         [ -1.9609,   0.2617,  -4.9062,  ...,  -4.0938,  -1.1250,  -4.5625],
         [ -0.6875,  -1.0000,  -3.7969,  ...,  -5.9062,  -0.6289,  -4.6875]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.3711,   0.3906,  -4.1250,  ...,  -3.6562,  -0.9414,  -3.6562],
         [ -1.7812,   0.4980,  -4.7500,  ...,  -3.9219,  -1.0469,  -4.4375],
         [ -0.7500,  -0.9727,  -3.8750,  ...,  -5.7812,  -0.5625,  -4.7500]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [  0.5547,   1.6641,  -3.3906,  ...,  -2.7969,   0.1680,  -3.0469],
         [ -1.1328,   0.9102,  -4.5000,  ...,  -3.7344,  -0.8320,  -4.4375],
         [ -0.0811,  -0.4375,  -3.9844,  ...,  -4.9688,   0.0703,  -4.3125]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.8477,   0.1816,  -3.9219,  ...,  -3.5156,  -0.9180,  -3.6250],
         [ -1.9297,   0.1035,  -4.9375,  ...,  -3.9844,  -1.0391,  -4.5312],
         [ -3.1250,  -1.3438,  -5.6562,  ...,  -6.1562,  -1.0703,  -5.1875]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.6484,   0.2891,  -4.0625,  ...,  -3.6406,  -0.9336,  -3.7500],
         [ -2.0312,   0.2734,  -5.0312,  ...,  -3.8906,  -1.0234,  -4.6250],
         [ -2.9688,  -1.3750,  -5.8125,  ...,  -6.2500,  -1.1875,  -5.3750]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -1.2734,  -0.1299,  -4.3125,  ...,  -3.7656,  -1.0391,  -3.8594],
         [ -2.7969,  -0.3711,  -5.5312,  ...,  -4.3750,  -1.4531,  -5.0312],
         [ -3.0781,  -1.6641,  -5.6875,  ...,  -6.5000,  -1.3281,  -5.5625]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.5547,   0.4766,  -3.9688,  ...,  -3.5938,  -1.0625,  -3.7656],
         [ -1.4844,   0.6055,  -4.5938,  ...,  -3.9688,  -1.1875,  -4.2500],
         [ -2.7500,  -1.6250,  -4.7188,  ...,  -6.4688,  -1.1484,  -5.2188]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.1621,   0.3730,  -3.7500,  ...,  -3.2812,  -0.6914,  -3.4531],
         [ -1.6562,   0.1250,  -4.8750,  ...,  -4.0000,  -1.0469,  -4.5000],
         [ -0.8008,  -0.8711,  -3.9844,  ...,  -5.6250,  -0.4297,  -4.6250]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.4336,   0.1631,  -3.7188,  ...,  -3.2188,  -0.6406,  -3.6562],
         [ -1.3906,   0.7578,  -4.4688,  ...,  -3.6406,  -1.0781,  -4.4688],
         [ -1.8828,  -1.1562,  -4.3438,  ...,  -5.6562,  -0.8906,  -5.0625]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [  0.1338,   0.3672,  -4.0000,  ...,  -3.7188,  -0.9883,  -3.8125],
         [ -0.6875,   0.9141,  -4.4375,  ...,  -3.8125,  -1.1406,  -4.0938],
         [ -1.7891,  -1.0938,  -5.0938,  ...,  -6.0000,  -0.8789,  -5.1875]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.4863,  -0.1602,  -3.8750,  ...,  -3.5625,  -1.0312,  -3.8594],
         [ -1.6641,   0.8594,  -4.3125,  ...,  -3.5938,  -1.3828,  -4.4062],
         [ -1.9766,  -1.0391,  -4.1562,  ...,  -5.5625,  -0.9258,  -5.0000]]],
       device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.7891,  -0.3457,  -4.0625,  ...,  -3.7500,  -1.2891,  -4.0625],
         [ -1.8203,   0.6055,  -4.5000,  ...,  -3.7656,  -1.5703,  -4.4688],
         [ -1.7266,  -0.9961,  -4.1875,  ...,  -5.5312,  -0.9258,  -4.9062]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.5273,   0.8320,  -3.8125,  ...,  -3.3438,  -0.4082,  -3.4844],
         [ -1.5625,   0.6211,  -4.6562,  ...,  -3.9219,  -0.8438,  -4.2812],
         [ -1.0156,  -1.0078,  -4.5312,  ...,  -5.3750,  -0.3691,  -4.6562]]],
       device='cuda:0'),)
(tensor([[[-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         ...,
         [-1.1953e+00,  2.0605e-01, -4.2500e+00,  ..., -3.7812e+00,
          -9.7656e-01, -3.7812e+00],
         [-2.8438e+00, -7.2632e-03, -5.4375e+00,  ..., -4.2500e+00,
          -1.3047e+00, -4.8438e+00],
         [-3.1406e+00, -1.4375e+00, -5.7188e+00,  ..., -6.3750e+00,
          -1.2109e+00, -5.4375e+00]],

        [[-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         [-1.2000e+01, -6.9062e+00, -6.8438e+00,  ..., -9.7500e+00,
          -8.0625e+00, -6.5938e+00],
         ...,
         [-9.7656e-01,  4.3750e-01, -3.8438e+00,  ..., -3.2812e+00,
          -6.8750e-01, -3.5000e+00],
         [-2.2031e+00,  2.3047e-01, -4.9375e+00,  ..., -3.8750e+00,
          -8.5156e-01, -4.5938e+00],
         [-2.8125e+00, -1.2266e+00, -5.2188e+00,  ..., -5.9062e+00,
          -8.4375e-01, -5.1250e+00]]], device='cuda:0'),)
(tensor([[[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [ -0.3730,   0.4199,  -4.0312,  ...,  -3.6562,  -0.8438,  -3.6875],
         [ -1.0781,   0.5859,  -4.5938,  ...,  -3.9219,  -0.9727,  -4.6562],
         [ -0.7070,  -0.9336,  -3.6719,  ...,  -5.5625,  -0.4023,  -5.1250]],

        [[-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         [-12.0000,  -6.9062,  -6.8438,  ...,  -9.7500,  -8.0625,  -6.5938],
         ...,
         [  0.0708,   0.7852,  -3.2344,  ...,  -2.7031,   0.1826,  -2.8125],
         [ -1.6328,   0.2500,  -4.7812,  ...,  -3.7812,  -0.6445,  -4.2188],
         [ -3.6562,  -1.5156,  -6.0000,  ...,  -6.5625,  -1.2344,  -5.0625]]],
       device='cuda:0'),)
{'eval_loss': 3.015531063079834, 'eval_runtime': 32.2288, 'eval_samples_per_second': 7.323, 'eval_steps_per_second': 0.465, 'epoch': 0.08}

======================================== [DEBUGGING AT GLOBAL STEP: 10] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'A': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option A is correct because it shows the back-top-left view.', 'D': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option D is incorrect because it includes rotated non-symmetric faces.', 'B': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option B is incorrect because it includes rotated non-symmetric faces.', 'C': 'Assuming the bottom face is the first cell in the second row of the net, and the right face is the cell to its right. Option C is incorrect because it is a horizontally mirrored version of the back-top-right view.'} The final answer is <answer>A</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m'AA::'A$ '..... the the the. the the........................top...''''DD:''ass....................................rotmetry...'''''':''ass....................... the............rotmetry...''''CC:''ass........ the the the. the........ the. the right.................top-top...''  answer answer answer<<>>A<<>>eos_>_id>[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 11] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'A': 'Option A is correct because the cube stack can be obtained by rotating the original stack around the y-axis by 270 degrees.', 'C': 'Option C is incorrect because it is a horizontally mirrored version of the original cube stack.', 'B': 'Option B is incorrect because it was obtained by removing one small cube from the original stack.'} The final answer is <answer>A</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m'''::' Option A A is because the stack stack stack stack by by the the the stack the stack the-- by. 70. ''''CC::' C  incorrect because is stack is stackror horizontally of the the stack stack stack.''''''::'   is incorrect because is stack by by the one cubes cube the the stack stack.'   final answer is<<answer>A<<>>eos_>_id[0m
===========================================================================================================


======================================== [DEBUGGING AT GLOBAL STEP: 12] (TRAIN) ========================================

--- [1. Ground Truth Labels] ---
  - Sample 0 Label: [92m'ABCD': 'Given three views, at least 12 cubes and at most 17 cubes are required to satisfy the constraints.'} The final answer is <answer>A</answer>eos_token_id[0m

--- [2. Model Prediction from Logits] ---
  - Sample 0 Pred: [93m'ABCCD'::' Given three views, least at,11 cubes cubes least most12 cubes cubes cubes to satisfy the the constraints.'}  final answer is<<answer>A</answer>eos_token_id[0m
===========================================================================================================
    main()
  File "/data1/oujingfeng/project/twgi/Orthus/train/train_orthus.py", line 160, in main
    trainer.train(resume_from_checkpoint=True if os.path.isdir(args.output_dir) and any(fn.startswith("checkpoint-") for fn in os.listdir(args.output_dir)) else False)
  File "/data1/oujingfeng/project/twgi/Orthus/transformers/src/transformers/trainer.py", line 2122, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/data1/oujingfeng/project/twgi/Orthus/transformers/src/transformers/trainer.py", line 2474, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/data1/oujingfeng/project/twgi/Orthus/transformers/src/transformers/trainer.py", line 3606, in training_step
    self.accelerator.backward(loss, **kwargs)
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/accelerate/accelerator.py", line 2238, in backward
    self.deepspeed_engine_wrapped.backward(loss, **kwargs)
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/accelerate/utils/deepspeed.py", line 186, in backward
    self.engine.backward(loss, **kwargs)
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/utils/nvtx.py", line 20, in wrapped_fn
    ret_val = func(*args, **kwargs)
              ^^^^^^^^^^^^^^^^^^^^^
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/engine.py", line 2323, in backward
    self._do_optimizer_backward(loss, retain_graph)
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/engine.py", line 2269, in _do_optimizer_backward
    self.optimizer.backward(loss, retain_graph=retain_graph)
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/utils/nvtx.py", line 20, in wrapped_fn
    ret_val = func(*args, **kwargs)
              ^^^^^^^^^^^^^^^^^^^^^
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/zero/stage3.py", line 2318, in backward
    self.loss_scaler.backward(loss.float(), retain_graph=retain_graph)
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/fp16/loss_scaler.py", line 65, in backward
    scaled_loss.backward(retain_graph=retain_graph)
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/torch/_tensor.py", line 647, in backward
    torch.autograd.backward(
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/torch/autograd/__init__.py", line 354, in backward
    _engine_run_backward(
  File "/data1/conda/envs/orthus/lib/python3.11/site-packages/torch/autograd/graph.py", line 829, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
[rank0]: Traceback (most recent call last):
[rank0]:   File "/data1/oujingfeng/project/twgi/Orthus/train/train_orthus.py", line 175, in <module>
[rank0]:     main()
[rank0]:   File "/data1/oujingfeng/project/twgi/Orthus/train/train_orthus.py", line 160, in main
[rank0]:     trainer.train(resume_from_checkpoint=True if os.path.isdir(args.output_dir) and any(fn.startswith("checkpoint-") for fn in os.listdir(args.output_dir)) else False)
[rank0]:   File "/data1/oujingfeng/project/twgi/Orthus/transformers/src/transformers/trainer.py", line 2122, in train
[rank0]:     return inner_training_loop(
[rank0]:            ^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/data1/oujingfeng/project/twgi/Orthus/transformers/src/transformers/trainer.py", line 2474, in _inner_training_loop
[rank0]:     tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
[rank0]:                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/data1/oujingfeng/project/twgi/Orthus/transformers/src/transformers/trainer.py", line 3606, in training_step
[rank0]:     self.accelerator.backward(loss, **kwargs)
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/accelerate/accelerator.py", line 2238, in backward
[rank0]:     self.deepspeed_engine_wrapped.backward(loss, **kwargs)
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/accelerate/utils/deepspeed.py", line 186, in backward
[rank0]:     self.engine.backward(loss, **kwargs)
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/utils/nvtx.py", line 20, in wrapped_fn
[rank0]:     ret_val = func(*args, **kwargs)
[rank0]:               ^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/engine.py", line 2323, in backward
[rank0]:     self._do_optimizer_backward(loss, retain_graph)
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/engine.py", line 2269, in _do_optimizer_backward
[rank0]:     self.optimizer.backward(loss, retain_graph=retain_graph)
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/utils/nvtx.py", line 20, in wrapped_fn
[rank0]:     ret_val = func(*args, **kwargs)
[rank0]:               ^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/zero/stage3.py", line 2318, in backward
[rank0]:     self.loss_scaler.backward(loss.float(), retain_graph=retain_graph)
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/deepspeed/runtime/fp16/loss_scaler.py", line 65, in backward
[rank0]:     scaled_loss.backward(retain_graph=retain_graph)
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/torch/_tensor.py", line 647, in backward
[rank0]:     torch.autograd.backward(
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/torch/autograd/__init__.py", line 354, in backward
[rank0]:     _engine_run_backward(
[rank0]:   File "/data1/conda/envs/orthus/lib/python3.11/site-packages/torch/autograd/graph.py", line 829, in _engine_run_backward
[rank0]:     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[rank0]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]: KeyboardInterrupt
